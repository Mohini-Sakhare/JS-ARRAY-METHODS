// 1.push() :--
The push() method is used to add an element at the end of an Array. As arrays in JavaScript are mutable objects, we can easily add or remove elements from the Array.
let a = [10, 20, 30, 40, 50];
a.push(60);
a.push(70, 80, 90);
console.log(a);

output:
[
  10, 20, 30, 40, 50,
  60, 70, 80, 90
]

// 2. pop() :--
The pop() method is used to remove elements from the end of an array. 
let a = [20, 30, 40, 50];
a.pop();
console.log(a);

output:
[ 20, 30, 40 ]


// 3. unshift() :--
The unshift() method is used to add elements to the front of an Array.
let a = [20, 30, 40];
a.unshift(10, 20);
console.log(a);

output:
[ 10, 20, 20, 30, 40 ]


// 4. shift() :--
The shift() method is used to remove elements from the beginning of an array 
let a = [20, 30, 40, 50];
a.shift();
console.log(a);

output 
[ 30, 40, 50 ]

// 5. Slice() :--
The slice() method returns a new array containing a portion of the original array, based on the start and end index provided as arguments.
const a = [1, 2, 3, 4, 5];
const res = a.slice(1, 4);
console.log(res); 
console.log(a)

output :
[ 2, 3, 4 ]
[ 1, 2, 3, 4, 5 ]

// 6. Splice() :--
The splice() method is used to Insert and Remove elements in between the Array.
let a = [20, 30, 40, 50];
a.splice(1, 3);
a.splice(1, 0, 3, 4, 5);
console.log(a);

output :
[ 20, 3, 4, 5 ]

7. some() :--
The some() method checks whether at least one of the elements of the array satisfies the condition checked by the argument function.
const a = [1, 2, 3, 4, 5];
let res = a.some((val) => val > 4);
console.log(res);

output:
true

8. map() :--
The map() method creates an array by calling a specific function on each element present in the parent array. It is a non-mutating method.
const a = [1, 2, 3, 4];

// Use map to create a new array with elements doubled
const b = a.map(x => x * 2);

console.log(b);

output :--
[ 2, 4, 6, 8 ]


9. filter() :--
The filter() method in JavaScript creates a new array with all elements that pass the test implemented by the provided function. It does not modify the original array.
let a1 = [1, 2, 3, 4, 5]
let a2 = a1.filter((num) => num > 1)
console.log(a2)

output:
[ 2, 3, 4, 5 ]


10. reduce() :--
The reduce() method is used to reduce the array to a single value and executes a provided function for each value of the array (from left to right) and the return value of the function is stored in an accumulator.
let a = [88, 50, 25, 10];
let sub = a.reduce(geeks);

function geeks(tot, num) {
    return tot - num;
}
console.log(sub);

output:
3

11. reverse() :--
The reverse() method is used to reverse the order of elements in an array. It modifies the array in place and returns a reference to the same array with the reversed order.

let a = [1, 2, 3, 4, 5];
a.reverse();
console.log(a);
